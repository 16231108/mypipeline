apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: sequential-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.4.0, pipelines.kubeflow.org/pipeline_compilation_time: '2021-06-10T22:40:12.714052',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "A pipeline with two sequential
      steps.", "inputs": [{"default": "gs:// ml-pipeline/sample-data/ shakespeare/shakespeare1.txt",
      "name": "text", "optional": true}], "name": "Sequential pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.4.0}
spec:
  entrypoint: sequential-pipeline
  templates:
  - name: con
    container:
      args: [/app/com.py, '{{inputs.parameters.echo-data}}', '{{inputs.parameters.echo-2-data}}']
      command: [python3]
      image: star16231108/mypy:v1
    inputs:
      parameters:
      - {name: echo-2-data}
      - {name: echo-data}
  - name: echo
    container:
      args: [echo "$0" |tee $1, '{{inputs.parameters.txt-sp-out}}', /tmp/results.txt]
      command: [sh, -c]
      image: library/bash:4.4.23
    inputs:
      parameters:
      - {name: txt-sp-out}
    outputs:
      parameters:
      - name: echo-data
        valueFrom: {path: /tmp/results.txt}
      artifacts:
      - {name: echo-data, path: /tmp/results.txt}
  - name: echo-2
    container:
      args: [echo "$0" |tee $1, '{{inputs.parameters.myfun-2-Output}}', /tmp/results.txt]
      command: [sh, -c]
      image: library/bash:4.4.23
    inputs:
      parameters:
      - {name: myfun-2-Output}
    outputs:
      parameters:
      - name: echo-2-data
        valueFrom: {path: /tmp/results.txt}
      artifacts:
      - {name: echo-2-data, path: /tmp/results.txt}
  - name: myfun
    container:
      args: [--a, '4', --b, '7', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def myfun(a,b):
            return str(int(a)+int(b));

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Myfun', description='')
        _parser.add_argument("--a", dest="a", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--b", dest="b", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = myfun(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    outputs:
      parameters:
      - name: myfun-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: myfun-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--a", {"inputValue": "a"}, "--b", {"inputValue": "b"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def myfun(a,b):\n    return str(int(a)+int(b));\n\ndef _serialize_str(str_value:
          str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of str.''.format(str(str_value), str(type(str_value))))\n    return
          str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Myfun'',
          description='''')\n_parser.add_argument(\"--a\", dest=\"a\", type=str, required=True,
          default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\", dest=\"b\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = myfun(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "a"}, {"name": "b"}], "name":
          "Myfun", "outputs": [{"name": "Output", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"a": "4", "b": "7"}'}
  - name: myfun-2
    container:
      args: [--a, '{{inputs.parameters.myfun-Output}}', --b, '{{inputs.parameters.myfun-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def myfun(a,b):
            return str(int(a)+int(b));

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Myfun', description='')
        _parser.add_argument("--a", dest="a", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--b", dest="b", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = myfun(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: myfun-Output}
    outputs:
      parameters:
      - name: myfun-2-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: myfun-2-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--a", {"inputValue": "a"}, "--b", {"inputValue": "b"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def myfun(a,b):\n    return str(int(a)+int(b));\n\ndef _serialize_str(str_value:
          str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of str.''.format(str(str_value), str(type(str_value))))\n    return
          str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Myfun'',
          description='''')\n_parser.add_argument(\"--a\", dest=\"a\", type=str, required=True,
          default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\", dest=\"b\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = myfun(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "a"}, {"name": "b"}], "name":
          "Myfun", "outputs": [{"name": "Output", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"a": "{{inputs.parameters.myfun-Output}}",
          "b": "{{inputs.parameters.myfun-Output}}"}'}
  - name: sequential-pipeline
    inputs:
      parameters:
      - {name: text}
    dag:
      tasks:
      - name: con
        template: con
        dependencies: [echo, echo-2]
        arguments:
          parameters:
          - {name: echo-2-data, value: '{{tasks.echo-2.outputs.parameters.echo-2-data}}'}
          - {name: echo-data, value: '{{tasks.echo.outputs.parameters.echo-data}}'}
      - name: echo
        template: echo
        dependencies: [txt-sp]
        arguments:
          parameters:
          - {name: txt-sp-out, value: '{{tasks.txt-sp.outputs.parameters.txt-sp-out}}'}
      - name: echo-2
        template: echo-2
        dependencies: [myfun-2]
        arguments:
          parameters:
          - {name: myfun-2-Output, value: '{{tasks.myfun-2.outputs.parameters.myfun-2-Output}}'}
      - {name: myfun, template: myfun}
      - name: myfun-2
        template: myfun-2
        dependencies: [myfun]
        arguments:
          parameters:
          - {name: myfun-Output, value: '{{tasks.myfun.outputs.parameters.myfun-Output}}'}
      - name: txt-sp
        template: txt-sp
        arguments:
          parameters:
          - {name: text, value: '{{inputs.parameters.text}}'}
  - name: txt-sp
    container:
      args: ['import sys;m=sys.argv[1].split();f=open(''/tmp/result'',''w'');sys.stdout=f;print(m)',
        '{{inputs.parameters.text}}']
      command: [python3, -c]
      image: python:3.7
    inputs:
      parameters:
      - {name: text}
    outputs:
      parameters:
      - name: txt-sp-out
        valueFrom: {path: /tmp/result}
      artifacts:
      - {name: txt-sp-out, path: /tmp/result}
  arguments:
    parameters:
    - {name: text, value: 'gs:// ml-pipeline/sample-data/ shakespeare/shakespeare1.txt'}
  serviceAccountName: pipeline-runner
